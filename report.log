2020-10-28 10:43:05,783 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 10:43:05,795 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 10:43:06,533 - tensorflow - INFO - Assets written to: Models/CrossX_Prod_N8_L1_relu_linear_E2_MB128/assets
2020-10-28 10:48:09,600 - tensorflow - INFO - Assets written to: Models/mH3_N16_L2_relu_linear_E2_MB128/assets
2020-10-28 11:08:59,209 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 11:08:59,213 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 11:08:59,566 - tensorflow - INFO - Assets written to: Models/CrossX_Prod_N8_L1_relu_linear_E2_MB128/assets
2020-10-28 11:13:26,361 - tensorflow - INFO - Assets written to: Models/mH3_N16_L2_relu_linear_E2_MB128/assets
2020-10-28 11:25:18,879 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 11:25:18,884 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 11:25:19,217 - tensorflow - INFO - Assets written to: Models/CrossX_Prod_N8_L1_relu_linear_E2_MB128/assets
2020-10-28 11:30:01,945 - tensorflow - INFO - Assets written to: Models/mH3_N16_L2_relu_linear_E2_MB128/assets
2020-10-28 11:56:41,135 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 11:56:41,141 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-10-28 11:56:42,175 - tensorflow - INFO - Assets written to: Models/CrossX_Prod_N8_L1_relu_linear_E2_MB128/assets
2020-10-28 12:00:39,118 - tensorflow - INFO - Assets written to: Models/mH3_N16_L2_relu_linear_E2_MB128/assets
2020-10-28 13:55:43,184 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 14:50:35,261 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 15:04:20,331 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 15:04:49,964 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 15:05:25,175 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 15:06:06,241 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 15:06:57,979 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 15:07:03,725 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.0016254012007266283, best pos: [-1.36714025 -1.87904614 -1.61536913  4.25818804 -0.51807661 -0.28891139
  1.49770613  0.39216547]
2020-10-28 17:43:08,056 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 17:43:13,859 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.21630674600601196, best pos: [-0.57505752 -0.69082353 -1.66130435 -1.42974269  1.52132701 -1.23505311
  0.8838703   1.66962036]
2020-10-28 17:46:14,325 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 17:46:20,515 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.666529357433319, best pos: [-0.5585135  -1.71076829 -1.65342903 -1.06649855  0.0533593  -0.51555394
  1.33352577  1.48235715]
2020-10-28 17:57:38,831 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 17:57:44,516 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.12451588688418269, best pos: [-1.81935917 -1.67366951 -0.76345101  4.63485079 -0.66630435 -0.7855329
  1.31238963 -1.88936758]
2020-10-28 17:58:40,484 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 17:58:46,281 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.959606438875198, best pos: [ 1.8732536  -0.56160367  1.2025278  -0.05829455  1.72606503 -1.13495569
 -1.48740793  1.63622105]
2020-10-28 18:05:59,025 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:04,914 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 7.436810672283173, best pos: [-1.94605926 -1.91716691 -1.43958881  3.29776984  1.68709212 -1.10503898
 -0.76728815  0.59681129]
2020-10-28 18:06:05,095 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:10,881 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.6751127243041992, best pos: [-1.63549661 -1.5343838  -0.32318337 -0.36464832 -0.44333939 -1.21205761
  1.70820414  1.19848713]
2020-10-28 18:06:11,042 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:16,667 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.5059002228081226, best pos: [-1.2474321  -1.7138525  -0.91602817  1.58383023  1.61142033 -0.9280598
  1.59071825 -1.75978064]
2020-10-28 18:06:16,821 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:22,517 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4.466315984725952, best pos: [-1.00572615 -1.96282387  0.32064722 -1.4276855   0.25913305 -0.52892524
  1.18255523 -0.47545812]
2020-10-28 18:06:22,676 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:28,568 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.3346279859542847, best pos: [-0.42162413 -1.53944413 -0.46256212 -1.21717787  1.6918945  -1.07179182
  0.79046535 -1.14231929]
2020-10-28 18:06:28,736 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:34,486 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.879430890083313, best pos: [-1.97034592 -1.19560909 -1.27410332 -1.21451457  1.54433374  0.35494859
  1.84647749 -2.03089174]
2020-10-28 18:06:34,637 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:40,727 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.953302264213562, best pos: [-0.40952411 -1.62297231 -1.19639991  0.64537781  1.45078766 -1.13715722
  1.3923868  -2.29568279]
2020-10-28 18:06:40,879 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:46,838 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.8875280097126961, best pos: [-1.76467094 -1.62834111 -1.54646402 -1.03572761  1.39051407 -0.3579037
  0.72209038  0.53797664]
2020-10-28 18:06:46,998 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:52,711 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.677942156791687, best pos: [-1.67857719 -1.51009114 -1.02633176 -1.01557181  0.48666129 -0.65644606
  1.11820798 -1.69407264]
2020-10-28 18:06:52,885 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:06:59,120 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.738553985953331, best pos: [-1.90874204 -1.86849382 -1.09358715  0.06165018  1.39146751 -0.10697236
  1.67106756  0.26001499]
2020-10-28 18:06:59,297 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:07:05,108 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.035139560699463, best pos: [-1.42137467 -1.59730039  1.04941805 -1.02360832  1.03882796 -0.97246308
  1.71813244  1.25788136]
2020-10-28 18:07:05,280 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:07:10,918 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.36436128616333, best pos: [-1.85889678 -1.47597387 -1.01330398 -0.85685269  0.52050231 -1.10782146
  1.45114095 -1.69541026]
2020-10-28 18:07:11,079 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:07:17,273 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.9109733998775482, best pos: [-1.86306445 -1.6539338   0.34815313 -1.64475194 -1.39384189 -1.16190702
  1.56895365 -1.05437134]
2020-10-28 18:07:17,433 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:07:28,230 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.6896225214004517, best pos: [ 0.29858872 -1.91371101 -0.67268203 -1.62249651  1.05959681 -0.31900386
  0.52930987  1.51397439]
2020-10-28 18:07:28,563 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:07:38,218 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.790928602218628, best pos: [-0.32394848 -1.75173317 -0.09083785 -0.59981308  0.46033853 -1.1700796
  1.62791909 -1.77027687]
2020-10-28 18:07:38,421 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:07:48,244 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.6549236178398132, best pos: [-0.276014   -1.8298027   0.99068292 -0.31591298  1.02016351 -1.22747155
  1.65713898 -1.31950645]
2020-10-28 18:07:48,459 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:07:54,093 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.7028140539769083, best pos: [-1.80241655 -1.73362011 -0.41241242 -0.89410437  0.83670808 -0.5220416
  1.41662044 -0.46782216]
2020-10-28 18:07:54,249 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:08:01,727 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 5.46164146065712, best pos: [-1.74416885 -1.63048234 -0.13370892 -0.16396053  1.54184017 -0.74240989
  0.8814311  -2.13439254]
2020-10-28 18:08:01,874 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:08:10,260 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.7704887390136719, best pos: [-1.37932661 -1.75550303 -1.39837691  3.31659389  1.14584604 -0.74558361
  1.5885627  -1.68203435]
2020-10-28 18:08:10,458 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:08:19,433 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.5841169357299805, best pos: [-0.58760038 -1.8892837  -1.13211295  4.85804129  0.08542872 -0.84275647
  1.70209491 -0.22731347]
2020-10-28 18:08:19,684 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:08:26,932 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.6741922944784164, best pos: [-1.6441421  -1.41897347 -1.12076199  4.62489057  1.16869215 -0.72454575
  1.76010577  0.21016055]
2020-10-28 18:08:27,085 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:08:34,424 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.4832100896164775, best pos: [-1.73150334 -1.50447937 -1.54925449  3.60033315  0.98835197 -0.98446748
  1.74830247  0.04365622]
2020-10-28 18:08:34,571 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:08:41,955 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.721325933933258, best pos: [-0.99127295 -1.9012141  -0.72900504 -1.63688951  0.07197436  0.59009792
  1.64958449 -2.19457675]
2020-10-28 18:08:42,109 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:08:53,055 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.699162557721138, best pos: [-1.90959528 -1.72801109  0.08448412  3.89605107 -2.27255817 -1.26962154
  1.45710008 -1.96900603]
2020-10-28 18:08:53,199 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:09:03,696 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.0375606715679169, best pos: [-1.91201947 -1.42711836 -0.12497675  4.74197019  1.71144459 -0.51321488
  1.66562809  1.61542112]
2020-10-28 18:09:04,023 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:09:12,098 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.0237344056367874, best pos: [-1.87993223 -1.16224348 -0.68451787 -1.12410743  0.82164454 -0.79495793
  1.82823866  1.61339789]
2020-10-28 18:09:12,261 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:09:21,891 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.98336111754179, best pos: [-1.86303854 -1.93492577 -1.37115902 -1.00027638 -0.26447383 -0.37536741
  0.55144063  1.44251994]
2020-10-28 18:09:22,048 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:09:30,601 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 1.0483360588550568, best pos: [-1.68537097 -1.92465397 -1.40726529  0.84240773 -1.11678093 -1.00864701
  1.77549874 -0.70493385]
2020-10-28 18:09:30,751 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:09:38,310 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.8092157756909728, best pos: [-1.46614539 -1.77307758 -0.56723456 -1.50037962  0.45184467 -1.15910021
  0.05916186  0.80664565]
2020-10-28 18:09:38,479 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:09:48,351 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.40260736644268036, best pos: [-1.22348135 -1.86371608 -1.14718624  4.76058269 -1.83177835 -0.53396007
  1.50142782  0.65562805]
2020-10-28 18:09:48,546 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:09:57,091 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.8400975316762924, best pos: [-1.90933779 -1.72977516 -0.61277531 -0.91500237  0.10273001 -0.311714
  1.83340576  0.57681302]
2020-10-28 18:09:57,312 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:10:03,033 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3.356082260608673, best pos: [-0.24374157 -1.87421348 -1.56417756 -0.95290732  0.21743752 -1.11954312
  1.57917442 -0.14557144]
2020-10-28 18:10:03,188 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:10:39,783 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:10:45,452 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.35422952473163605, best pos: [ 1.46204226 -1.5000179   1.16990064 -1.42005831  1.07871376 -0.0721411
 -2.50220653  1.62757563]
2020-10-28 18:10:45,610 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:10:51,268 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2.279846668243408, best pos: [-1.98982798 -1.42882122  0.79106184 -1.1847257   0.43494919 -0.90602979
  1.14723186  1.59759043]
2020-10-28 18:12:11,037 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:12:17,337 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.25081997364759445, best pos: [-1.95096739 -1.73789641 -0.93383164  3.93822392 -1.09343216 -0.56960743
  1.49570577 -1.81167723]
2020-10-28 18:12:17,499 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:12:23,757 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.7391548305749893, best pos: [-1.84745257 -1.86863201 -1.20897038  3.72537388 -1.40464114  0.01321061
  1.49313552  1.0850296 ]
2020-10-28 18:17:39,248 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:17:45,363 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 0.9769968166947365, best pos: [-1.13371944 -1.65871531 -1.47902451  4.81642033 -0.97960416 -0.88502217
  0.96548346 -1.41447078]
2020-10-28 18:17:45,525 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2020-10-28 18:17:51,304 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 10.237435430288315, best pos: [-0.50873293 -1.88992592 -1.39859534  2.35750614  0.17336461 -1.06266277
  1.39614465 -1.33191769]
2020-12-10 14:38:06,596 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-12-10 14:38:06,606 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2020-12-10 14:38:07,334 - tensorflow - INFO - Assets written to: Models/mWpm_N32_L4_relu_linear_E20_MB16/assets
2020-12-10 14:38:31,333 - tensorflow - INFO - Assets written to: Models/mTop_N1024_L4_relu_linear_E20_MB16/assets
2021-01-15 13:38:13,888 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Model.state_updates (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2021-01-15 13:38:13,895 - tensorflow - WARNING - From /usr/local/lib/python3.7/site-packages/tensorflow/python/training/tracking/tracking.py:111: Layer.updates (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.
Instructions for updating:
This property should not be used in TensorFlow 2.0, as updates are applied automatically.
2021-01-15 13:38:14,457 - tensorflow - INFO - Assets written to: Models/y_Ackley_N512_L2_relu_linear_E10_MB32/assets
2021-01-15 13:41:52,129 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:52,935 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18512.25, best pos: [-0.02389363 -0.01626017]
2021-01-15 13:41:52,951 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:53,568 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 19177.06640625, best pos: [-0.07519289  0.02804309]
2021-01-15 13:41:53,576 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:54,183 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 19587.958984375, best pos: [-0.096313   -0.03938236]
2021-01-15 13:41:54,191 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:54,796 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 19077.5546875, best pos: [-0.05875028  0.04350939]
2021-01-15 13:41:54,805 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:55,423 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18586.57421875, best pos: [-0.01998627  0.02599021]
2021-01-15 13:41:55,432 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:56,053 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 20236.642578125, best pos: [0.05131898 0.10717534]
2021-01-15 13:41:56,059 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:56,668 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18700.08203125, best pos: [0.03025726 0.02926325]
2021-01-15 13:41:56,678 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:57,286 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 19035.845703125, best pos: [0.06207063 0.00876267]
2021-01-15 13:41:57,294 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:57,900 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 19539.220703125, best pos: [-0.01701051  0.09361952]
2021-01-15 13:41:57,909 - pyswarms.single.global_best - INFO - Optimize for 20 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:41:58,523 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 21747.59765625, best pos: [0.12874774 0.07240903]
2021-01-15 13:42:52,387 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:42:54,199 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18606.6796875, best pos: [0.02664943 0.00575689]
2021-01-15 13:42:54,213 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:42:55,697 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18650.341796875, best pos: [ 0.00986038 -0.0339843 ]
2021-01-15 13:42:55,705 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:42:57,201 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18496.244140625, best pos: [-0.01359101 -0.0071778 ]
2021-01-15 13:42:57,224 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:42:58,719 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18496.45703125, best pos: [-0.01213733  0.00182738]
2021-01-15 13:42:58,727 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:43:00,235 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18516.65234375, best pos: [-0.00176571  0.00881428]
2021-01-15 13:43:00,244 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:43:01,735 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18588.380859375, best pos: [ 0.01343781 -0.01965255]
2021-01-15 13:43:01,742 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:43:03,263 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18531.234375, best pos: [8.87068264e-03 9.99423848e-05]
2021-01-15 13:43:03,273 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:43:04,838 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18580.11328125, best pos: [-0.03152397 -0.02831953]
2021-01-15 13:43:04,847 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:43:06,332 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18528.326171875, best pos: [-6.71820884e-05 -1.59902509e-02]
2021-01-15 13:43:06,340 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.1, 'c2': 0.1, 'w': 1.0, 'k': 4, 'p': 2}
2021-01-15 13:43:07,837 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 18635.25390625, best pos: [-0.03227476  0.02401396]
